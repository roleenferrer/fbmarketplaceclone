#
# CSE183 Assignment 8 Backend
#

openapi: '3.0.3'

info:
  description: CSE183 Assignment 8 Backend
  version: 0.1.0
  title: CSE183 Assignment 8 Backend

servers:
  - url: http://localhost:3010/v0

paths:
  /dummy:
    get:
      description: Dummy Endpoint
      responses:
        200:
          description: Succesful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DummyResponse'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        
  /marketplace:
    get:
      description: Return the listings in the category identified by the id
      parameters:
      - in: query
        name: category
        description: Name Of Category
        required: false
        schema:
          type: string
      responses:
        200:
          description: Category found
          content:
            application/json:
              schema:
                type: array
                items:              
                  $ref: '#/components/schemas/Listing'
        404:
          description: Category Does Not Exist
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              
  /marketplace/{category}:
    get:
      description: Return the subcategories under the given category
      parameters:
        - in: path
          name: category
          description: Name of Category
          required: true
          schema:
            type: string
      responses:
        200:
          description: Category found
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        404:
          description: Category Does Not Exist
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /marketplace/search/{searchTerm}:
    get:
      description: Return results based on search term and listing title
      parameters:
        - in: path
          name: searchTerm
          description: Search for listings (case insensitive)
          required: true
          schema:
            type: string
      responses:
        200:
          description: Searched successfully
          content:
            application/json:
              schema:
                type: array
                items:              
                  $ref: '#/components/schemas/Listing'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /user:
    get:
      description: Return user specified by email and password
      parameters:
      - in: query
        name: email
        description: Email to search DB with
        required: true
        schema:
          type: string
      responses:
        200:
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUser'
        404:
          description: User not found (email or password incorrect)
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      description: Insert user into database
      requestBody:
        description: User name, email, and encrypted password to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostUser'
      responses:
        201:
          description: User inserted successfully
        400:
          description: Incorrect properties
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /user/listings:
    get:
      description: Returns user's listings
      parameters:
      - in: query
        name: name
        description: Name of author to search db
        required: true
        schema:
          type: string
      responses:
        200:
          description: Category found
          content:
            application/json:
              schema:
                type: array
                items:              
                  $ref: '#/components/schemas/Listing'
        404:
          description: No Listings found
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []         # use the same name as above

components:
  schemas:
    Error:
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
      required:
        - code
        - message

    DummyResponse:
      properties:
        message:
          type: string
      required:
        - message

    Listing:
      type: object
      properties:
        member:
          type: string
          format: uuid
        listingID:
          type: string
          format: uuid
        listing:
          type: object
          properties:
            author:
              type: string
            price:
              type: string
            title:
              type: string
            content:
              type: object
              properties:
                description:
                  type: string
                img:
                  type: string
            date:
              type: string
          required:
            - author
            - title
            - price
            - content
            - date
      required:
        - member
        - listing
        - listingID
    GetUser:
      type: object
      properties:
        member:
          type: object
          properties:
            member:
              type: object
              properties:
                hash:
                  type: string
                name:
                  type: string
                email:
                  type: string
              required:
                - name
                - email
    PostUser:
      type: object
      properties:
        fname:
          type: string
        lname:
          type: string
        email:
          type: string
        password:
          type: string

  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes